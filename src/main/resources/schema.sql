drop table if exists likes;
drop table if exists friendship;
drop table if exists film_genres;
drop table if exists users;
drop table if exists films;
drop table if exists genres;
drop table if exists mpa;


create table if not exists genres
(
    id int generated by default as identity primary key,
    name varchar(100) not null
);

create table if not exists mpa
(
    id int generated by default as identity primary key,
    name varchar(100) not null
);

create table if not exists users
(
    id int generated by default as identity primary key,
    name varchar(255),
    login varchar(255) not null,
    birthday date not null,
    email varchar(255) not null
);

create table if not exists friendship
(
    user_id int,
    friend_id int,
    foreign key (user_id) references users(id) on delete cascade,
    foreign key (friend_id) references users(id) on delete cascade,
    primary key (user_id, friend_id)
);

create table if not exists films
(
    id int generated by default as identity primary key,
    name varchar(255) not null,
    release_date date,
    description  varchar(200),
    duration int,
    mpa_id int,
    foreign key (mpa_id) references mpa(id)
);

create table if not exists likes
(
    user_id int,
    film_id int,
    foreign key (film_id) references films(id) on delete cascade,
    foreign key (user_id) references users(id) on delete cascade,
    primary key (user_id, film_id)
);

create table if not exists film_genres
(
    film_id int,
    genre_id int,
    foreign key (film_id) references films(id) on delete cascade,
    foreign key (genre_id) references genres(id) on delete cascade,
    primary key (film_id, genre_id)
);

create unique index if not exists USER_EMAIL_INDEX on USERS (email);
create unique index if not exists USER_LOGIN_INDEX on USERS (login);